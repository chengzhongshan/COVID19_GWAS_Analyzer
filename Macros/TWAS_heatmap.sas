
*It is still better to have these raw SPredXcan association signals by tissue and HGI GWAS;
*To acomplish this, the raw SPredXcan output needs to be combined into a single file for making expected TWAS heatmap;
*Use my own Perl script to combine these files within linux docker image;
*H:\MetaXcan\MetaXcan\software\LongCOVID_MetaXcan\HGI_TWAS_HGI_Combined.txt, which is actually comma separated csv file generated by the following code:;
*AppendAllFilesMatchRgxInDir.pl . '\.csv$' HGI_TWAS_HGI_Combined.txt 2 1;
*ConvertCombinedMetaXcanSingleTissuesAssocIntoTxt.sh HGI_TWAS_HGI_Combined.txt >HGI_TWAS_HGI_Combined.tmp; 
*mv HGI_TWAS_HGI_Combined.tmp HGI_TWAS_HGI_Combined.txt;
/*
proc import datafile="H:\MetaXcan\MetaXcan\software\LongCOVID_MetaXcan\HGI_TWAS_HGI_Combined.txt" 
dbms=tab out=TWAS4HGI replace;
getnames=yes;
guessingrows=1000000;
run;
proc datasets nolist;
copy in=work out=D memtype=data move;
select TWAS4HGI;
run;
*/
/*proc print data=D.TWAS4HGI(obs=10);*/
/*run;*/

/*Update TWAS4HGI with gene position*/
/*
libname FM 'E:\LongCOVID_HGI_GWAS';
libname D 'H:\Coorperator_projects\COVID_Papers_2023\HGI_NonHospitalizationGWASPaper';

proc sql;
select unique(filename)
from D.TWAS4HGI;
proc sql;

create table D.TWAS4HGI as
select a.*,
             case 
			 when prxmatch("/C2_vs_B1/",filename) then "C2_vs_B1"
			 when prxmatch("/B2_vs_B1/",filename) then "B1_vs_B2"
             when (scan(filename,1,'_')="HGI" and  not prxmatch("/(B2_vs_B1|C2_vs_B1)/",filename)) then scan(filename,2,'_')
			 else  scan(filename,1,'_')
             end as gwas,
           b.chr,b.st + b.end as pos
from  D.TWAS4HGI as a,
          (select distinct ensembl, chr, st, end from FM.GTF_hg19
           where type="gene"
         ) as b
		  where a.gene=b.ensembl
;


*/

*******************************************************TWAS heatmap Macro***********************************************;
%macro TWAS_heatmap(
dsdin=tops,/*Long format TWAS data, which should contain the var tissue*/
_num_chrs_=&chrs4testing, /*Empty value or single or multiple numeric chromosome numbers*/
/*The following 3 vars will be used to filter the input dsdin*/
 var4matrix_row=gene, 
 var4matrix_col=tissue, 
 value_var4matrix=p_i_best,
 logP_var=,/*If empty, logP will be designated as -log10(&value_var4matrix), otherwise, the input var will be used to generate logP as -log10(&logP_var)*/
 vars4combined_rowvar=gwas,/*Combined vars will be used to count the number of obs passed filters for final heatmap rows*/
var4colvar=tissue,/*var subject to count the number of obs passed filters for the final heatmap cols*/
heatmap_width=800,
heatmap_height=1000,
barplot_width=1000,
barplot_height=400,
pvalue_cutoff=0.05 /*Only focus on gene and tissue with at least one record with pvalue < pvalue_cutoff*/
);

*For empty _num_chrs_, assign value ALL to it;
%if %length(&_num_chrs_)=0 %then %let _num_chrs_=ALL;

%do i_chr=1 %to %ntokens(&_num_chrs_);

%let chr=%scan(&_num_chrs_,&i_chr,%str( ));
%if %length(&chr)=0 %then %do;
	  %put &num_chrs;
	  %put &i_chr;
	  %abort 255;
%end;

data tops1;
set &dsdin;
%if %length(&logP_var)=0 %then %do;
 logP=-log10(&value_var4matrix);
 %end;
 %else %do;
 logP=-log10(&logP_var);
 %end;

%if %length(&chr)>0 and &chr^=ALL %then %do;
where  chr=&chr;
/*where gwas not contains "LongCOVID";*/
%end;
run;
/*
proc sql;
create table tops2 as
select a.* from tops1 as a
group by tissue
having min(pvalue)<0.05;
create table tops3 as 
select a.* from tops2 as a
group by gene
having min(pvalue)<0.05;
*/

*This is better than the use of two sas macros to remove rows and columns with all missing in the final table;
*This actually is not necessary, as the input tops1 is alread selected for pvalue based on an even smaller cutoff, i.e., 1e-5;
*However, further evaluation reveals that the following codes are helpful;
%filter_longform_dsd4matrix(
 dsdin=tops1,
 var4matrix_row=&var4matrix_row, 
 var4matrix_col=&var4matrix_col, 
 value_var4matrix=&value_var4matrix,
 value_cutoff_fun=min,
 value_cutoff=&pvalue_cutoff,
 cutoff_condition= <, 
 dsdout=tops2
);

%long2wide4multigrpsSameTypeVars(
/*Note: this macro is handy when there are multiple target numeric or characteric variables needs to be transposed to rowwide;
*Tranditional transpose procedure usually handle one type of variable to rowwide by other group variables;
*But this macro can abtain wide format table for multiple variables at rowwide at the same time by other group variables;
*The key macro parameter to represent these multiple variables is "SameTypeVars";*/
long_dsd=tops2,
outwide_dsd=forheatmap_wide,
grp_vars=&var4matrix_col,/*If grp_vars and SameTypeVars are overlapped,
the macro will automatically only keep it in the grp_vars; 
grp_vars can be multi vars separated by space, which 
can be numeric and character*/
subgrpvar4wideheader=comb_gene_gwas,/*This subgrpvar will be used to tag all transposed SameTypeVars 
in the wide table, and the max 753*48*4 of this var can not be >32!*/
dlm4subgrpvar=#,/*string used to split the subgrpvar if it is too long*/
ithelement4subgrpvar=1,/*Keep the nth splitted element of subgrpvar and use it for tag 
in the final wide table*/
SameTypeVars=logP, /*These same type of vars will be added with subgrp tag in the 
final wide table; Make sure they are either numberic or character vars and not 
overlapped with grp_vars and subgrpvar!*/
ShortenColnames=1,/*Replace long headers for these transposed variables in the final rowwide table with numberic names, such as V1, V2, V3, ..., Vn;
Too match with original group vars used to generate these header names, please check the sas dataset wide_ids_lookup!*/
PutGrpVarsAtEndOfTable=0,/*When the ShortenColnames is 1, it is possible to put the grp_vars at the beginning or the end of the final table*/
tot_wide_ids_cutoff=6000,/*If more than the number of combined grp_vars*num_of_SameTypeVars, short colnames,such as V1, V2,..., Vn, will be used in the final table*/
AllowedWideIDLength=50,/*If the length of wide_ids (combined grp_vars and SameTypeVars) longer than 20, the above numeric colnames will be used*/
debug=0, /*print the first 2 records for the final wide format dsd*/
rm_rows_with_all_missing=1,/*Remove rows with all missing values*/
missing_rows_type=_numeric_,	/*target row type, such as _numeric_ or _character_, subjected to remove with all missing value*/
rm_cols_with_all_missing=1,/*Remove columns with all missing values*/
missing_columns_type=_numeric_	/*target column type, such as _numeric_ or _character_, subjected to remove with all missing value*/
);


/*%Rename_Del_Rgx4All_Vars(indsd=work.forheatmap_wide,Rgx=logP_);*/
/*%debug_macro;*/
data Wide_ids_lookup;
set Wide_ids_lookup;
wide_ids=prxchange("s/(logP[_*]+|_\s+)//",-1,wide_ids);
wide_ids=prxchange("s/_+/ /",-1,wide_ids);
_wide_ids_=prxchange("s/(logP[_*]+|_\s+)//",-1,_wide_ids_);
_wide_ids_=prxchange("s/_+/ /",-1,_wide_ids_);
run;
data forheatmap_wide;
set forheatmap_wide;
tissue=prxchange("s/_+/ /",-1,tissue);
run;


/*%debug_macro;*/
ods html image_dpi=300 ;
ods graphics on /reset=all;
%clustergram4sas(
dsdin=forheatmap_wide,
rowname_var=&var4matrix_col,
numeric_vars=_numeric_,
switch_rownames_as_colnames=0,
numvars_label_dsd=Wide_ids_lookup,/*Default is empty, which will use the names of these numeric vars to label heatmap;
provide a dataset looking up the names of these numeric vars to new labels that will be used in the final heatmap;
this dataset might be generated by long2wide4multigrpsSameTypeVars, and the name of lookup table is Wide_ids_lookup
Important: the default order of columns is sorted by the wide_ids in this dataset, which is used to sort heatmap rowwide if 
the cluster_type is for column-wide, which means cluster_type=1; thus it is possible to change the wide_ids or numgrp for sorting
the final heatmap row-wide with custom settings*/
numvarname_in_labeldsd=numgrp,/*variable name for these numeric variable names in the label dsd*/
numvarlabel_in_labeldsd=_wide_ids_,/*the variable name containing the new labels for these numeric vars in the label dsd*/
num_ord_var=num_ord,/*Numeric index variable, such as 1, 2, 3, and so on, from the above label dsd to sort the numvarlabel in the final heatmap*/
colaxis_font_setting=%str(Style=italic size=10 weight=bold family="Courier"),/*column label setting for font style, size, and weight*/
rowaxis_font_setting=%str(Style=normal size=10 weight=bold family="Courier"),/*column label setting for font style, size, and weight*/
max_rows4labeling=500,/*If there are >200 rows in the heatmap, row labels will be supressed for clearity and simplicity*/
max_cols4labeling=500,/*If there are >200 columns in the heatmap, column labels will be supressed for clearity and simplicity*/
height=&heatmap_height,
width=&heatmap_width,
columnweights=0.001 0.999,/*This would be remove the left most colum-wide cell, particularly useful when the cluster_type=1*/ 
rowweights=0.02 0.98,
cluster_type=1,
missing_value=0,
show_heatmap_grid=1,/*Remove grid by providing 0 if there are too many rows or columns in the data matrix*/
rangemap_setting=%str(
rangeattrmap name="ResponseRange";
        range 1.3-6 / rangeColorModel=(CXFFFFB2 CXFED976 CXFEB24C CXFD8D3C CXFC4E2A CXE31A1C CXB10026);
        range 0-1.299   / rangeColorModel=(white lightblue); 
        range OTHER /rangeColorModel=(lime);  
        range MISSING / rangeColorModel=(white);   
endrangeattrmap;
rangeattrvar var=dist                        
attrmap="ResponseRange"       
attrvar=RangeVar;  
),
rowaxis_rotation=diagonal2
);



data tops2;
set tops2;
tag=0;
if logP>1.3 then tag=1;
xr=_n_;
run;
%leftalign4catstr(
dsdin=tops2,
vars4cat=&vars4combined_rowvar,
combinedVar=comb_vars4rows,
dsdout=tops3,
add_extra_sep_et_end=1
);
proc sort data=tops3;by gwas logP;

**********************************Bar plots are with issues**************************;

*Generate bars to display number of tissues showing nominal significance for each gene-GWAS pairs;
%sorted_barplot(
grpdsd=tops3,	/*input dataset for making sorted barplots by the values of a grp variable*/
grp_var=comb_vars4rows, /*character groups for x-axis*/
xaxis_valuesrotate_type=diagonal2,
xaxis_discval_order_by_data=1,
by_var= , /*Numeric values for sorting bars and values on y-axis*/
var4barplot=tag,/*Default is to generate bar plot with numeric by_var; 
If the freq_count_var is not empty, it will use freq_count_var to generate bar plot*/
label4grp_var=Gene GWAS pair,	/*Label for x-axis*/
label4y=# of tissues with P<0.05, /*Label for y-axis*/
freq_count_var=,/*If not empty, it will use frequency count but not by_var for bar plot*/
stat4bar=sum, /*generate bar plot for the statistic of vara4barplot, such as mean, sum, median, Nmissing*/
fig_width=&barplot_width,
fig_height=&barplot_height,
colorbars_by_grp=1, /*Use different color for each bar*/
colorgrp_var=,
datalabel_var=tag,
no_autolegend=1
);

*Generate bars to illustrate number of gene-gwas pairs passed the nominal significance in each tissue;
%sorted_barplot(
grpdsd=tops3,	/*input dataset for making sorted barplots by the values of a grp variable*/
grp_var=&var4colvar, /*character groups for x-axis*/
xaxis_valuesrotate_type=diagonal2,
xaxis_discval_order_by_data=1,
by_var= , /*Numeric values for sorting bars and values on y-axis; It is necessary to use the same var as that 
of grp_var to remove duplicates of grp_var for making format for the final xaxis ticks!*/
var4barplot=tag,/*Default is to generate bar plot with numeric by_var; 
If the freq_count_var is not empty, it will use freq_count_var to generate bar plot*/
label4grp_var=&var4matrix_col,	/*Label for x-axis*/
label4y=# of gene-GWAS pairs with P<0.05, /*Label for y-axis*/
freq_count_var=,/*If not empty, it will use frequency count but not by_var for bar plot*/
stat4bar=sum, /*generate bar plot for the statistic of vara4barplot, such as mean, sum, median, Nmissing*/
fig_width=&barplot_width,
fig_height=&barplot_height,
colorbars_by_grp=1, /*Use different color for each bar*/
colorgrp_var=,
datalabel_var=tag,
no_autolegend=1
);

%end;

%mend;
*******************************************************TWAS heatmap Macro***********************************************;

/*Demo codes:;

libname D 'H:\Coorperator_projects\COVID_Papers_2023\HGI_NonHospitalizationGWASPaper';

*Demo codes 1:;
*************************Draw figure for candidate hit and nearby genes******;
proc sql;
create table tops  as
select a.*
from D.TWAS4HGI as a,
(
select distinct chr, pos, gene_name 
from D.TWAS4HGI
where gene_name="BPTF"
) as b
where a.chr=b.chr and a.pos between b.pos-500000 and b.pos+500000
;

*It is necessary to remove duplicates;
proc sort nodupkeys;by gene_name;

*Now only focus on these top genes and make heatmap for them;
proc sql;
create table tops_all as
select a.*,prxchange("s/.*_with_(.*)/$1/",-1,a.filename) as tissue

from D.TWAS4HGI as a,
         tops as b
		 where a.gene_name=b.gene_name and a.gwas not contains "C2_vs_B1"
;

proc sql;
select unique(chr)	into: chrs4testing separated by ' '
from tops_all;
%put &chrs4testing;

%leftalign4catstr(
dsdin=tops_all,
vars4cat=gene_name gwas,
combinedVar=comb_gene_gwas,
dsdout=tops
);


*Note: need to manually change the figure sizes for different subplots accordingly;
*chrs: 1, 2, 3, 6, 9, 15, 19, 21;

%TWAS_heatmap(
dsdin=tops,
_num_chrs_= &chrs4testing,
heatmap_width=1000,
heatmap_height=1600,
barplot_width=1000,
barplot_height=400,
pvalue_cutoff=0.05
);


*Demo codes 2:;
*************************Draw figures for hits by chr*******************************;
proc sql;
create table tops (where=(pvalue<1e-5)) as
select a.*
from D.TWAS4HGI as a
group by gwas, gene_name
having pvalue=min(pvalue)
;
*It is necessary to remove duplicates;
proc sort nodupkeys;by gene_name;

*Now only focus on these top genes and make heatmap for them;
proc sql;
create table tops_all as
select a.*,prxchange("s/.*_with_(.*)/$1/",-1,a.filename) as tissue

from D.TWAS4HGI as a,
         tops as b
		 where a.gene_name=b.gene_name and a.gwas not contains "C2_vs_B1"
;

proc sql;
select unique(chr)	into: chrs4testing separated by ' '
from tops_all;
%put &chrs4testing;

%leftalign4catstr(
dsdin=tops_all,
vars4cat=gene_name gwas,
combinedVar=comb_gene_gwas,
dsdout=tops
);


*Note: need to manually change the figure sizes for different subplots accordingly;
*chrs: 1, 2, 3, 6, 9, 15, 19, 21;

%TWAS_heatmap(
dsdin=tops,
_num_chrs_=3
);



*/










