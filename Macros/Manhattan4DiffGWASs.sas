* macro that can be used later to generate symbols for plots with two alternating colors;
%macro twocolors(c1,c2);
%do j=1 %to 23 %by 2;
symbol&j v=dot c=&c1;
symbol%eval(&j+1) v=dot c=&c2;
%end;
%mend;

%macro uniqcolors;
/*https://support.sas.com/content/dam/SAS/support/en/books/pro-template-made-easy-a-guide-for-sas-users/62007_Appendix.pdf*/
*For standard RGB chars generated by inkscape, it is necessary to remove the last two chars ff and put cx at the beginning;
symbol1 v=dot h=&dotsize c=cx0072bd;
symbol2 v=dot h=&dotsize c=cxd95319;
symbol3 v=dot h=&dotsize c=cxedb120;
symbol4 v=dot h=&dotsize c=cx7e2f8e;
symbol5 v=dot h=&dotsize c=cx77ac30;
symbol6 v=dot h=&dotsize c=cx4dbeee;
symbol7 v=dot h=&dotsize c=cxa2142f;
symbol8 v=dot h=&dotsize c=cx0072bd;
symbol9 v=dot h=&dotsize c=cxd95319;
symbol10 v=dot h=&dotsize c=cxedb120;
symbol11 v=dot h=&dotsize c=cx7e2f8e;
symbol12 v=dot h=&dotsize c=cx77ac30;
symbol13 v=dot h=&dotsize c=cx4dbeee;
symbol14 v=dot h=&dotsize c=cxa2142f;
symbol15 v=dot h=&dotsize c=cx0072bd;
symbol16 v=dot h=&dotsize c=cxd95319;
symbol17 v=dot h=&dotsize c=cxedb120;
symbol18 v=dot h=&dotsize c=cx7e2f8e;
symbol19 v=dot h=&dotsize c=cx77ac30;
symbol20 v=dot h=&dotsize c=cx4dbeee;
symbol21 v=dot h=&dotsize c=cxa2142f;
symbol22 v=dot h=&dotsize c=cx0072bd;
symbol23 v=dot h=&dotsize c=cxd95319;
%mend;


%global chr_var;*Make sure we can asign new vale to it in some IF condition;
*This will be used by color macros for different chromosomes;
%global dotsize;

%macro Manhattan4DiffGWASs(
dsdin=,/*Input GWAS dataset with multiple GWAS p variables put in columns; it is ideal to have sorted GWAS by numeric chr and position*/
pos_var=,/*Position variable for markers, such as SNPs*/
chr_var=,/*Chromosome variable for markers, such as SNPs; it is better to have numberic chr var as input*/
P_var=,/*The P var for the 1st GWAS that is put at the bottom of the final manhattan plot*/
Other_P_vars=, /*Leave it empty or provide other GWAS P vars in order for making manhattan plots from botton to up*/
logP=1,/*Provide value 1 to indicate the need of performing -log10 caculation for input P_var; Make sure the P_var and Other_P_vars are in the same format!*/
gwas_thrsd=7.3,/*Use it to draw significance reference line in each GWAS track*/
dotsize=2,/*The dot size for scatter plots*/
_logP_topval=10, /*Top -log10P value to truncate GWAS signals and also restrict the max yaxis value of each GWAS track;
Make sure to input EVEN number for the macro, as the macro separate ticks by step 2!*/
fig_width=1200,
fig_height=500,
fontsize=3,
flip1stGWAS_signal=1, /*When providing value 1, which will draw the 1st GWAS at the bottom in reverse order for the yaxis, 
which means the most significant association will be put close to bottom;
provide value 0 to draw the 1st GWAS in vertical mode!*/
refline_color_4zero=gray, /*Color the manhattan bottom line*/
rm_signals_with_logP_lt=0.5, /*To make the manhattan plot have reference line at association signal of zero,
it is better to remove associaiton signal logP for all GWASs less than the cutoff*/
use_uniq_colors=1, /*Draw scatter plots with different colors for chromosomes;
provide value 0 to use SAS default color scheme;*/
gwas_sortedby_numchrpos=0, /*Ideally the input GWAS dsdin should be sorted by numchr and pos;
if the GWAS dsdin is not, the macro will sort it accordingly but will require more memory and disk space*/
outputfigname=Manhattan /*a prefix used to label the output figure*/
);

/**fake data;*/
/*data manhattan ;*/
/*Fake_position=1; */
/*do &chr_var=1 to 22;*/
/*do _n_=1 to ( 1e6 - &chr_var * 10000 ) - 1 by 1000 ;*/
/*   Fake_position + _n_ / 1e6 ;*/
/*   logp = -log( ranuni(2)) ;*/
/*   output ;*/
/*end;*/
/*end;*/
/*run;*/


*Check &chr_var type for preparing of making alternative var _chr_ for plotting;
*Note: will create a global var: var_type, which can be used in other macro;
%check_var_type(
dsdin=&dsdin,
var_rgx=&chr_var
);
%put Created a global var for chr, its type of which is &var_type;
/*%put the macro chr_var is &chr_var;*/

*For char &chr_var;
%if "&var_type"="2" %then %do;
/*This step will take a lot of disk space*/
data &dsdin;
set &dsdin;
frq=1;
run;
/*use the frq for sorting by total number of data points*/
%format_xaxis_with_numeric_order(
dsdin=&dsdin,
Xaxis_vars=&chr_var,
new_Xaxis_var=_chr_,
Var4sorting_Xaxis=frq,
function4sorting=count,
descending_or_not=0,
dsdout=&dsdin,
createdfmtname=Xaxis_var_label);

/*Use the following when the above failed*/
/* This will change char chr labels into numeric ones */
/* Used when it is necessary */

/* %chr_format_exchanger( */
/* dsdin=&dsdin, */
/* char2num=1, */
/* chr_var=&chr_var, */
/* dsdout=&dsdin); */

*Just try to reuse the above function, the function4sorint is not useful;
*so asign missing value for it;
%let chr_var=_chr_;
%end;


*real data;
%if %eval("&gwas_thrsd"="") %then %do;
%let gwas_thrsd=7.3;
%end;

*Sorting the gwas will slow down the macro;
/*
proc sort data=&dsdin;
by &chr_var &pos_var;
run;
*/

%if &gwas_sortedby_numchrpos=0 %then %do;
proc sort data=&dsdin;
by &chr_var &pos_var;
run;
%end;

%if %sas_dsd_exist(sasdsd=&dsdin)=0 %then %do;
    %put Your input dataset &dsdin does not exist or is broken;
    %abort 255;
%end;
 

%let nrows=%rows_in_sas_dsd(test_dsd=&dsdin);
%put There are &nrows in your dataset;

/*For EWAS;*/
%if (&nrows lt 100000 and &nrows gt 30000) %then %do;
data manhattan ;
set &dsdin;
Fake_position=1; 
Fake_position + _n_ / 1e2 ;/*This part will affect the Xaxis dramatically*/;
/*where &chr_var between 1 and 24;*/
/*where &chr_var >=1;*/
run;
%end;
/*For local EWAS or GWAS;*/
%else %if (&nrows lt 30000 and &nrows gt 4000) %then %do;

data manhattan ;
set &dsdin;
Fake_position=1; 
Fake_position + _n_ /2 ;/*This part will affect the Xaxis dramatically*/;
/*where &chr_var between 1 and 24;*/
/*where &chr_var >=1;*/
run;
%end;
/*For local EWAS or GWAS;*/
%else %if &nrows le 4000 %then %do;
data manhattan ;
set &dsdin;
Fake_position=1; 
Fake_position + _n_ ;/*This part will affect the Xaxis dramatically*/;
/*where &chr_var between 1 and 24;*/
/*where &chr_var >=1;*/
run;
%end;
/*For GWAS*/
%else %do;
data manhattan ;
set &dsdin;
Fake_position=1; 
Fake_position + _n_ / 1e3 ;/*This part will affect the Xaxis dramatically*/;
/*where &chr_var between 1 and 24;*/
/*where &chr_var >=1;*/
run;
%end;


data manhattan;
set manhattan(where=(&P_var^=.));
%if (&logP=1) %then %do;
logp=-log10(&P_var);
%end;
%else %do;
logp=&P_var;
%end;
run;

*Sorting the gwas will slow down the macro;
/*
proc sort data=manhattan;
by &chr_var Fake_position;
run;
*/

%if &gwas_sortedby_numchrpos=0 %then %do;
proc sort data=manhattan;
by &chr_var Fake_position;
run;
%end;
 
*find maximum value for the x-axis, store in a macro variable;
proc sql noprint;
select 1.005*ceil(max(Fake_position)) into :maxbp 
from manhattan;
quit;
 
* 
find mean of BP within each chromosome (C)
used later to position x-axis labels
;
proc summary data=manhattan nway;
class &chr_var;
var Fake_position;
output out=mbp mean=;
run;

 
* 
annotate data set used to add x-axis labels
"manually" add the frame around the graph
possibly add a horizontal reference line
;
data anno ;
retain position '8' xsys ysys '2' y 0 function 'label' text 'xx';
do until (last1);
   set mbp (keep = Fake_position &chr_var) end=last1;;
   x = round(Fake_position) ;
   *This step can be modified to remove the x-axis group labels by asigning empty str to text;
   %if "&var_type"="2" %then %do;
   text="";
   %end;
   %else %do;
   text = cat(&chr_var);
   if text="20" or text="22"  then text=" ";
   %end;
   output;
end;
 
* top of frame;
xsys = '1'; ysys = '1'; function = 'move'; x = 0; y=100; output;
xsys = '2'; function = 'draw'; x = &maxbp ; output;
* bottom of frame;
xsys = '1'; ysys = '1'; function = 'move'; x = 0; y=0; output;
xsys = '2'; function = 'draw'; x = &maxbp ; output;
 
* horizontal reference line (if needed for 5x10-08);
xsys = '1'; ysys = '2'; function = 'move'; x = 0; y=&_logP_topval; output;
xsys = '2'; function = 'draw'; x = &maxbp ; line=1; size=3; color="&refline_color_4zero";output;
%if (&flip1stGWAS_signal=0) %then %do;
xsys = '1'; ysys = '2'; function = 'move'; x = 0; y=&gwas_thrsd; output;
xsys = '2'; function = 'draw'; x = &maxbp ; line=2; size=1; color='darkred';output;
%end;
%else %do;
xsys = '1'; ysys = '2'; function = 'move'; x = 0; y=&_logP_topval-&gwas_thrsd; output;
xsys = '2'; function = 'draw'; x = &maxbp ; line=2; size=1; color='darkred';output;
%end;

%do ri=1 %to %ntokens(&Other_P_vars);

%if &ri < %ntokens(&Other_P_vars) %then %do;
xsys = '1'; ysys = '2'; function = 'move'; x = 0; y=&_logP_topval+&_logP_topval*&ri; output;
xsys = '2'; function = 'draw'; x = &maxbp ;  line=1; size=3; color="&refline_color_4zero";output;
%end;

xsys = '1'; ysys = '2'; function = 'move'; x = 0; y=&gwas_thrsd+&_logP_topval*&ri; output;
xsys = '2'; function = 'draw'; x = &maxbp ; line=2; size=1; color='darkred';output;

%end;

run;
 
* reset all then set some graphics options;
%let max_yaxis_val=%sysevalf(%ntokens(&Other_P_vars)*&_logP_topval + &_logP_topval);
*If put reset=all inside the command of goptions, the title will be removed;
*It is necessary to reset all here, otherwise, the figure may be distorted;
*Albany AMT is equivalent to Arial in SAS;
goptions reset=all ftext='Albany AMT' htext=&fontsize gunit=pct 
         dev=gif xpixels=&fig_width ypixels=&fig_height gsfname=gout;

 
* make some room around the plot (white space);
title1 ls=2;
title2 a=90 ls=2;
title3 a=-90 ls=2;
footnote1 ls=2;
 
* let SAS choose the colors;
* use h=5 to set dot size for the plot;
%if &use_uniq_colors=0 %then %do;
symbol1 v=dot r=22 h=&dotsize;
%end;
%else %do;
%uniqcolors; 
%end;

* two alternating colors;
* gray-scale;
*%twocolors(gray33,graycc);
* blue and blue-green;
*%twocolors(cx2C7FB8,cx7FCDBB);
 
* suppress drawing of any x-axis feature;
axis1 value=none major=none minor=none label=none style=0;
* rotate y-axis label;
axis2 label=(angle=90 "-Log10(p)" f='Albany AMT' h=&fontsize) 
     order=(0 to  &max_yaxis_val by 2)
      value=(f='Albany AMT' h=&fontsize
             %do _pi_=0 %to %ntokens(&Other_P_vars);
                %if (&flip1stGWAS_signal=1 and &_pi_=0) %then %do;
                  %do _ti_=&_logp_topval %to 2 %by -2;
                      "&_ti_"
                   %end;              
                 %end;
                 %else %do;
                  %do _ti_=0 %to %sysevalf(&_logp_topval-2) %by 2;
                      "&_ti_"
                   %end;
                  %end;
               %end;
                ' '
                  );
 
* destination for the plot;
filename gout "./&outputfigname..gif";
 
* use PROC GPLOT to create the plot;
*Add format for customized &chr_var labels;
*Make sure to remove nolegend;

data manhattan;
set manhattan;
*Further remove signals with logP<1.3, which will save space and prevent the reference lines covered by these signals with logP<1.3;
if logP<&rm_signals_with_logP_lt then logP=.;
if logp>&_logP_topval then logp=&_logP_topval;

%if (&flip1stGWAS_signal=1) %then %do;
logp=&_logP_topval-logp;
%end;


%do _mi_=1 %to %ntokens(&Other_P_vars);
 logp&_mi_=-log10(%scan(&Other_P_vars,&_mi_,' '));
if logP&_mi_<&rm_signals_with_logP_lt then logP&_mi_=.;
 if logp&_mi_>&_logP_topval then logp&_mi_=&_logP_topval ;
if logp&_mi_^=. then logp&_mi_=logp&_mi_+&_logP_topval*&_mi_;
%end;

run;

proc transpose data=manhattan out=manhattan(rename=(col1=logP) drop=_name_);
var logp:;
by &chr_var Fake_position;
run;


%if "&var_type"="2" %then %do;
/*Note: the offset setting will make the legend move left when value is negative!*/
*https://documentation.sas.com/doc/en/pgmsascdc/9.4_3.5/graphref/p0anvu6ux4d0ijn1mt06fn9yl0wx.htm#p18f31f18e6elan1ge5bb2pjiv34;
*Note: asign empty string for the label of the legend;
legend1 across=12 down=2 repeat=1 label=(height=4 position=top justify=center ' ')
        value=(height=3) shape=symbol(3,3) offset=(2pct)
        position=(bottom center outside);
*The offset=(0,0)cm or offset=(2pct) will affect the left position of the legend;
*See how to customize legend:;
*https://support.sas.com/resources/papers/proceedings/proceedings/forum2007/163-2007.pdf;

proc gplot data=manhattan ;
plot logp*Fake_position=&chr_var 
 /  
                 haxis = axis1
                 vaxis = axis2
                 href  = &maxbp
                 annotate = anno
               /*nolegend*/
		         noframe
		         legend=legend1
;
format &chr_var Xaxis_var_label.;
label Fake_position="Groups"
      &chr_var="Legends of groups";
run;


%end;

%else %do;
proc gplot data=manhattan ;
plot1 logp*Fake_position=&chr_var
 / 
                 haxis = axis1
                 vaxis = axis2
                 href  = &maxbp
                 annotate = anno
                 nolegend
		         noframe
;
run;
%end;

*This will enable the macro generate one figure by proc gplot in SAS OnDemand for Academics;
*Otherwise, there would be two duplicated Manhattan plots;
/* %return; */
*return does not work, and only quit dose!;
%put The macro will quit to prevent from two duplicated Manhattan plots printed!;
quit;

%mend;

/*

%Import_Space_Separated_File(abs_filename=E:\LongCOVID_HGI_GWAS\CombineLongCOVIDGWAS\CombineLongCOVIDGWAS.txt,
                             firstobs=1,
							 getnames=yes,
                             outdsd=Assoc);

proc import datafile="E:\LongCOVID_HGI_GWAS\CombineLongCOVIDGWAS\CombineLongCOVIDGWAS.txt"
dbms=tab out=Assoc replace;
getnames=yes;
run;

data Assoc1;
set Assoc;
*if _n_<10000;
rename _chrom=chr;
run;
proc sort data=Assoc1;
by chr pos;
run;
data Assoc1;
set Assoc1;
P=10**(-neg_log_pvalue4W2);
P1=10**(-neg_log_pvalue4W1);
P2=10**(-neg_log_pvalue4N2);
run;
*%debug_macro;
%Manhattan4DiffGWASs(
dsdin=Assoc1,
pos_var=pos,
chr_var=chr,
P_var=P,
Other_P_vars=P1 P2,
logP=1,
gwas_thrsd=7.3,
dotsize=2,
_logP_topval=10
);

*/




/*
<placed after first data step>
* add some fake info to the data set (SNP name and a p-value);
data manhattan;
set manhattan;
snp_name = cats('rs',_n_);
if ranuni(0) lt .0005 then p_value = 10e-6;
else p_value = 0.1;
run;
 
<modified data step to create the annotate data set>
* 
annotate data set used to add x-axis labels
"manually" add the frame around the graph
possibly add a horizontal reference line
add labels to selected points;
;
data anno ;
length color $8 text $25;
retain position '8' xsys ysys '2' y 0 function 'label' when 'a';
do until (last1);
   set mbp (keep = bp c) end=last1;;
   x = round(bp) ;
   text = cat(c);
   output;
end;
 
* top of frame;
xsys = '1'; ysys = '1'; function = 'move'; x = 0; y=100; output;
xsys = '2'; function = 'draw'; x = &maxbp ; output;
* bottom of frame;
xsys = '1'; ysys = '1'; function = 'move'; x = 0; y=0; output;
xsys = '2'; function = 'draw'; x = &maxbp ; output;
 
* horizontal reference line (if needed);
xsys = '1'; ysys = '2'; function = 'move'; x = 0; y=4; output;
xsys = '2'; function = 'draw'; x = &maxbp ; output;
 
* this portion adds labels for points with p_value le 10e-6;
function = 'label';
hsys = '3';
size = 1.5;
position = '5';
cbox = 'white';
color = 'blue';
do until (last2);
   set manhattan end=last2;
   where p_value le 10e-6;
   x = bp;
   y = logp;
   text = snp_name;
   output;
end;
 
run;
*/
